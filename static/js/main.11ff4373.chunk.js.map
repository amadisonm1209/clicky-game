{"version":3,"sources":["components/Images/Images.js","components/Scoreboard/Scoreboard.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","className","src","image","alt","name","onClick","handleClick","id","clicked","Scoreboard","feedback","score","highScore","Game","state","images","imageArray","forEach","i","setState","sort","Math","random","userScore","userHighScore","this","map","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wpCAiBeA,G,MAbG,SAACC,GAEf,OACI,yBACAC,UAAU,aACVC,IAAKF,EAAMG,MACXC,IAAKJ,EAAMK,KACXA,KAAML,EAAMK,KACZC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,GAAIR,EAAMS,cCU1CC,G,YAnBI,SAACV,GAClB,OACE,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,IACb,uDACA,2GAGJ,yBAAKA,UAAU,gBACb,4BAAKD,EAAMW,WAEb,yBAAKV,UAAU,UACb,0CAAgBD,EAAMY,MAAtB,sBAAgDZ,EAAMa,eCkE/CC,E,2MAxEXC,MAAQ,CACJC,SACAJ,MAAO,EACPC,UAAW,EACXF,SAAU,kD,EAIdJ,YAAc,SAACC,EAAIC,GACf,IAAMQ,EAAa,EAAKF,MAAMC,OAE9B,GAAIP,EAIA,OAHAQ,EAAWC,QAAQ,SAACf,EAAOgB,GACvBF,EAAWE,GAAGV,SAAU,IAErB,EAAKW,SAAS,CACjBjB,MAAOc,EAAWI,KAAK,kBAAMC,KAAKC,SAAW,KAC7CX,MAAO,EACPD,SAAU,kEAGdM,EAAWC,QAAQ,SAACf,EAAOgB,GACnBX,IAAOL,EAAMK,KACbS,EAAWE,GAAGV,SAAU,KAH7B,MAQ0B,EAAKM,MAA1BF,EARL,EAQKA,UACFW,EATH,EAQgBZ,MACO,EACpBa,EAAgBD,EAAYX,EAAYW,EAAYX,EAE1D,OAAO,EAAKO,SAAS,CACjBjB,MAAOc,EAAWI,KAAK,kBAAMC,KAAKC,SAAW,KAC7CX,MAAOY,EACPX,UAAWY,EACXd,SAAU,iC,wEAOZ,IAAD,OACL,OACI,6BACI,yBAAKV,UAAU,4BACX,kBAAC,EAAD,CACIW,MAAOc,KAAKX,MAAMH,MAClBC,UAAWa,KAAKX,MAAMF,UACtBF,SAAUe,KAAKX,MAAMJ,WAEzB,yBAAKV,UAAU,uBACX,yBAAKA,UAAU,iBACNyB,KAAKX,MAAMC,OAAOW,IAAI,SAAAxB,GAAK,OACxB,kBAAC,EAAD,CACIF,UAAW,gBACX2B,IAAKzB,EAAMK,GACXA,GAAIL,EAAMK,GACVH,KAAMF,EAAME,KACZF,MAAOA,EAAMA,MACbM,QAASN,EAAMM,QACfF,YAAa,EAAKA,wB,GAjEvCsB,aCWJC,G,uLAXX,OACE,oCACA,yBAAK7B,UAAU,kBACb,kBAAC,EAAD,Y,GANU4B,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.11ff4373.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Images.css\";\n\n\nconst ImageCard = (props) => {\n\n    return (\n        <img\n        className=\"image-card\"\n        src={props.image}\n        alt={props.name}\n        name={props.name}\n        onClick={() => props.handleClick(props.id, props.clicked)}\n    />\n   )\n}\n\nexport default ImageCard;","import React from \"react\";\nimport \"./Scoreboard.css\";\n\nconst Scoreboard = (props) => {\n  return (\n    <nav className=\"scoreboard container\">\n      <div className=\"row greeting\">\n        <div className=\"\">\n          <h2>Wes Anderson Click Game</h2>\n          <h4>Click each picture only one time and try to remember what you've clicked!</h4>\n        </div>\n      </div>\n      <div className=\"instructions\">\n        <h4>{props.feedback}</h4>\n      </div>\n      <div className=\"scores\">\n        <p>Your Score: {props.score}   |   High Score: {props.highScore}</p>\n      </div>\n    </nav>\n  )\n}\n\nexport default Scoreboard;\n\n","import React, { Component } from \"react\";\nimport images from \"../../images.json\";\nimport Images from \"../Images/Images\";\nimport \"./Game.css\";\nimport Scoreboard from \"../Scoreboard/Scoreboard.js\";\n\n\nclass Game extends Component {\n\n    //keep track of state for clicked images and scores\n    state = {\n        images,\n        score: 0,\n        highScore: 0,\n        feedback: \"Click a Wes Anderson character to get started!\"\n    };\n\n    //set up handleClick method\n    handleClick = (id, clicked) => {\n        const imageArray = this.state.images;\n\n        if (clicked) {\n            imageArray.forEach((image, i) => {\n                imageArray[i].clicked = false;\n            });\n            return this.setState({\n                image: imageArray.sort(() => Math.random() - .5),\n                score: 0,\n                feedback: \"You already clicked that one! Better luck next time old chap.\"\n            })\n        } else {\n            imageArray.forEach((image, i) => {\n                if (id === image.id) {\n                    imageArray[i].clicked = true;\n                }\n            });\n\n            //update state for the scores and check if it's a new high score \n            const { highScore, score } = this.state;\n            const userScore = score + 1;\n            const userHighScore = userScore > highScore ? userScore : highScore;\n\n            return this.setState({\n                image: imageArray.sort(() => Math.random() - .5),\n                score: userScore,\n                highScore: userHighScore,\n                feedback: \"Nicely done! Keep it going.\"\n            });\n            //end of else statement for correct guess\n        }\n    };\n\n    //render and return!\n    render() {\n        return (\n            <div>\n                <div className=\"container game-container\">\n                    <Scoreboard\n                        score={this.state.score}\n                        highScore={this.state.highScore}\n                        feedback={this.state.feedback}\n                    />\n                    <div className=\"gameboard container\">\n                        <div className=\"row media-row\">\n                                {this.state.images.map(image => (\n                                    <Images\n                                        className= \"three columns\"\n                                        key={image.id}\n                                        id={image.id}\n                                        name={image.name}\n                                        image={image.image}\n                                        clicked={image.clicked}\n                                        handleClick={this.handleClick} />\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n};\n\nexport default Game;","import React, { Component }from 'react';\nimport Game from \"./components/Game/Game\";\nimport './App.css';\n\nclass App extends Component {\n\n  render () {\n    return (\n      <>\n      <div className=\"game-container\">\n        <Game />\n      </div>\n      </>\n    )\n  }\n\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}